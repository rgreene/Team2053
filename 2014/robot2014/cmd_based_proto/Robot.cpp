// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
#include "NetworkTables/NetworkTable.h"
#include "Commands/AutonomousCommandN.h"



// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
driveTrain* Robot::driveTrain1 = 0;
Pneumatics* Robot::pneumatics = 0;
FeederArm* Robot::feederArm = 0;
OI* Robot::oi = 0;
NetworkTable* Robot::nTable ;
Timer* rTimer = 0;
Relay* Robot::LightRingRelay =0; 
//testing
bool ishulled;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	driveTrain1 = new driveTrain();
	pneumatics = new Pneumatics();
	feederArm = new FeederArm();
	rTimer = new Timer();
	LightRingRelay = new Relay(2);
	AxisCamera::GetInstance();	
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	
	oi = new OI();
	lw = LiveWindow::GetInstance();
	nTable = NetworkTable::GetTable("dataTable");
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommandN();
	compressor_Command = new Compressor_Command();
//	fireCatapultGroup = new FireCatapultGroup();
	
	compressor_Command->Run();
	//printf("ver: .1\n");
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	//nTable->PutString("currMode","None");//Initiating currMode with the string 'None'
	//testing
	ishulled = false;

  }
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
	
	RobotMap::driveTrainRobotDrive41->SetSafetyEnabled(false);
	
	nTable->PutString("currMode","Auto");
	rTimer->Reset();
	rTimer->Start();
	
	nTable->PutNumber("driveSpeed",0.7);
	nTable->PutNumber("driveTime",1.5);

	//fireCatapultGroup->Start();
	
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	SmartDashboard::PutNumber("Pressure",pneumatics->GetPressurePsi());
}
	
void Robot::TeleopInit() {
	rTimer->Reset();
	rTimer->Start();
	LightRingRelay->Set(Relay::kOn);
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
	//printf("Teleop Init: ------------------ \n");
	
	//new IdleCatapultGroup();
	nTable->PutString("currMode","Teleop");
	//testing
	SmartDashboard::PutNumber("Pressure",pneumatics->GetPressurePsi());
	//testing
	ishulled = false;
	RobotMap::driveTrainRobotDrive41->SetSafetyEnabled(false);
	
	
	
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL)
		Scheduler::GetInstance()->Run();
	
	//printf("Pressure : %fpsi \n",pneumatics->GetPressurePsi());
	//printf(" Voltage : %f volts \n",pneumatics->GetPressureRaw());
	SmartDashboard::PutNumber("Pressure",pneumatics->GetPressurePsi());
	//testing
	
//	SmartDashboard::PutBoolean("Hull Activated",pneumatics->GetHullSensor());
//		if(oi->getJoystick1()->GetRawButton(7))
//			ishulled = false;
}
void Robot::TestPeriodic() {	
	lw->Run();
	
}

START_ROBOT_CLASS(Robot);
